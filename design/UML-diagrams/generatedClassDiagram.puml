@startuml
class main {
    + main(String[] args)
    - authorizeStravaAccount(int userId): int
    - pullActivityData(int userId): void
    - createPetForUser(Scanner scanner, PetDAO petDAO, int userId): void
    - createHabitGoalForUser(Scanner scanner, HabitGoalDAO habitGoalDAO, int userId): void
    - amendHabitGoalForUser(Scanner scanner, HabitGoalDAO habitGoalDAO, int userId, User user): void
}

class User {
    - userId: int
    - username: String
    - profile: UserProfile
    - petBehaviour: PetBehaviour
    + User(int userId, String username)
    + User(int userId, String username, UserProfile profile, PetBehaviour petBehaviour)
    + getPetBehaviour(): PetBehaviour
    + setPetBehaviour(PetBehaviour petBehaviour): void
    + getProfile(): UserProfile
    + getUserId(): int
    + getUsername(): String
}

class UserProfile {
    - goals: List<FitnessGoal>
    + UserProfile(List<FitnessGoal> goals)
    + areAllGoalsAchievedThisWeek(): boolean
    + areSomeGoalsAchievedThisWeek(): boolean
    + areAllGoalsMissedForTwoWeeks(): boolean
    + setGoals(List<FitnessGoal> goals): void
    + getGoals(): List<FitnessGoal>
}

class PetBehaviour {
    - pet: Pet
    + PetBehaviour(Pet pet)
    + tryToMove(): void
    + tryToEat(): void
    + tryToPlay(): void
    + updateHealth(UserProfile profile): void
    + getPet(): Pet
}

class Pet {
    - petId: int
    - health: PetHealth
    - name: String
    + Pet(int petId, PetHealth health, String name)
    + getPetId(): int
    + getHealth(): PetHealth
    + getName(): String
    + eat(): abstract void
    + play(): abstract void
    + move(): abstract void
    + sleep(): abstract void
    + hibernate(): abstract void
}

class PetHealth {
    - status: PetHealthStatus
    + PetHealth(PetHealthStatus status)
    + getStatus(): PetHealthStatus
    + setStatus(PetHealthStatus status): void
    + updateStatus(PetHealthStatus newStatus): void
}

enum PetHealthStatus {
    HEALTHY
    SICK
    DEAD
}

class HabitGoalDAO {
    - connection: Connection
    + HabitGoalDAO(Connection connection)
    + createHabitGoal(int userId, GoalType goalType, SportType sportType, int targetValue): void
    + updateHabitGoal(int goalId, int newTargetValue): void
    + getGoalsForUser(int userId): List<FitnessGoal>
}

class PetDAO {
    - connection: Connection
    + PetDAO(Connection connection)
    + createPet(int userId, String petName, String petType, String healthStatus): void
    + getPetForUser(int userId): PetBehaviour
}

class UserDAO {
    - connection: Connection
    + UserDAO(Connection connection)
    + createUser(String username, String password): void
    + getUserById(int userId): User
    + updateUser(User user): void
    + deleteUser(int userId): void
}

class FitnessGoal {
    - goalId: int
    - userId: int
    - goalType: GoalType
    - targetValue: int
    - sport: SportType
    + FitnessGoal(int goalId, int userId)
    + getGoalId(): int
    + setGoalId(int goalId): void
    + getUserId(): int
    + setUserId(int userId): void
    + getGoalType(): GoalType
    + setGoalType(GoalType goalType): void
    + getSport(): SportType
    + setSport(SportType sport): void
    + getTargetValue(): int
    + setTargetValue(int targetValue): void
    + isThisWeeksGoalAchieved(): abstract boolean
    + wasLastWeeksGoalAchieved(): abstract boolean
}

class DatabaseConnection {
    - connection: Connection
    + getConnection(): Connection
    + disconnect(): void
}

enum GoalType {
    DISTANCE
    DURATION
    FREQUENCY
}

enum SportType {
    RUN
    SWIM
    RIDE
}

main --> User
User --> UserProfile
User --> PetBehaviour
PetBehaviour --> Pet
Pet --> PetHealth
PetHealth --> PetHealthStatus
main --> HabitGoalDAO
main --> PetDAO
main --> UserDAO
HabitGoalDAO --> FitnessGoal
FitnessGoal --> GoalType
FitnessGoal --> SportType

PetDAO --> Pet
PetDAO --> PetBehaviour
PetDAO --> DatabaseConnection : uses
HabitGoalDAO --> DatabaseConnection : uses
UserDAO --> User
UserDAO --> DatabaseConnection : uses
@enduml